// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SubdivisionFeature : Xunit.IUseFixture<SubdivisionFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Subdivision.feature"
#line hidden
        
        public SubdivisionFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Subdivision", @"It happened when single or some set of source properties produces new set
It may vary in results depends on lifespan of origin 
whethere it (o)=>{o`,n} or (o)=>{n1,n2} or {o1,o2} => {o1`,o2`,n...}
But main idea - cancel all RRR on source and produce new for targets
We may work on LAUnits for different right types at the same operation", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
        }
        
        public virtual void SetFixture(SubdivisionFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Subdivision")]
        [Xunit.TraitAttribute("Description", "Subdivision produces 2 new properties and no additional interests registered on s" +
            "ource")]
        public virtual void SubdivisionProduces2NewPropertiesAndNoAdditionalInterestsRegisteredOnSource()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subdivision produces 2 new properties and no additional interests registered on s" +
                    "ource", new string[] {
                        "subdivision"});
#line 11
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 15
 testRunner.Given("We have Parcel with Uid = \"Property 2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.And("Registration transaction \"REGO\" with No.\"TRN-PRE-OCCUPANCY-4-SUBD-002\" is set cur" +
                    "rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("Current transaction has property with Uid = \"Property 2\" in LAUnit \"LA-Occupancy-" +
                    "02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("Current transaction has party \"Tim Taler\" with role \"Grantee\" associated with LAU" +
                    "nit \"LA-Occupancy-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("Current transaction has party \"Sara Taler\" with role \"Grantee\" associated with LA" +
                    "Unit \"LA-Occupancy-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("transaction \"TRN-PRE-OCCUPANCY-4-SUBD-002\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Given("Registration transaction \"SUBS\" with No.\"TRN-SUBS-003\" is set current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.And("Current transaction has source LAUnit \"LA-Occupancy-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("Current transaction has property with Uid = \"Property 2\" in LAUnit \"LA-Occupancy-" +
                    "02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("Property \"Property 2\" in Transaction No\"TRN-SUBS-003\" Status set \"Archived\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("Current transaction has property with Uid = \"Property 3\" in LAUnit \"LA-Occupancy-" +
                    "03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("Current transaction has property with Uid = \"Property 4\" in LAUnit \"LA-Occupancy-" +
                    "04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("Current transaction has party \"Tim Taler\" with role \"Grantee\" associated with LAU" +
                    "nit \"LA-Occupancy-03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("Current transaction has party \"Sara Taler\" with role \"Grantee\" associated with LA" +
                    "Unit \"LA-Occupancy-04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("transaction \"TRN-SUBS-003\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("Cancelled by \"TRN-SUBS-003\" 2 \"Occupancy\" rights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 41
 testRunner.And("Party \"Tim Taler\" have active \"Occupancy\" rights on \"Property 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.And("Party \"Sara Taler\" have active \"Occupancy\" rights on \"Property 4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("Property \"Property 2\" is archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Subdivision")]
        [Xunit.TraitAttribute("Description", "Property changed with part of it registered as new property")]
        public virtual void PropertyChangedWithPartOfItRegisteredAsNewProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Property changed with part of it registered as new property", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 49
 testRunner.Given("We have Parcel with Uid = \"Property: Park\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
 testRunner.And("Registration transaction \"REGO\" with No.\"TRN-Park 4 Sub - 01\" is set current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-04-003\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And("Current transaction has property with Uid = \"Property: Park\" in LAUnit \"LA-Occupa" +
                    "ncy-04-003\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("Current transaction has party \"City Community\" with role \"Grantee\" associated wit" +
                    "h LAUnit \"LA-Occupancy-04-003\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("transaction \"TRN-Park 4 Sub - 01\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Given("Registration transaction \"SUBS\" with No.\"TRN-SUBS-Clear-001\" is set current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
 testRunner.And("Current transaction has source LAUnit \"LA-Occupancy-04-003\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-04-003\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("Current transaction has target LAUnit \"LA-Occupancy-04-003-New\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("Current transaction has property with Uid = \"Property 2\" in LAUnit \"LA-Occupancy-" +
                    "02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("Property \"Property 2\" in Transaction No\"TRN-SUBS-003\" Status set \"Archived\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("Current transaction has property with Uid = \"Property 3\" in LAUnit \"LA-Occupancy-" +
                    "03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("Current transaction has property with Uid = \"Property 4\" in LAUnit \"LA-Occupancy-" +
                    "04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("Current transaction has party \"Tim Taler\" with role \"Grantee\" associated with LAU" +
                    "nit \"LA-Occupancy-03\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("Current transaction has party \"Sara Taler\" with role \"Grantee\" associated with LA" +
                    "Unit \"LA-Occupancy-04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("transaction \"TRN-SUBS-003\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("Cancelled by \"TRN-SUBS-003\" 2 \"Occupancy\" rights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("Party \"Tim Taler\" have active \"Occupancy\" rights on \"Property 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("Party \"Sara Taler\" have active \"Occupancy\" rights on \"Property 4\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("Property \"Property 2\" is archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SubdivisionFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SubdivisionFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
