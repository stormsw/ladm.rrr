// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specifications
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MergeFeature : Xunit.IUseFixture<MergeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Merge.feature"
#line hidden
        
        public MergeFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Merge", @"It happens when set of source properties produces single (or smaller result set) property
{o1,o2,o3} => {o1`}, {o1,o2,o3} => {o1`,o2`} etc
We may inherit holders or introduce new ones - it doesn't matter
Technicall all source RRRs are archived and target produced. 
The Merge operation may have as a result an origin property elimenated.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line 9
 testRunner.Given("Registration transaction \"REGO\" with No.\"TRN-OCCUPANCY-4-MERGE-001\" is set curren" +
                    "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("Current transaction has target LAUnit \"Occupancy4Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("Current transaction has property with Uid = \"Property 4 Merge 01\" in LAUnit \"Occu" +
                    "pancy4Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("Current transaction has party \"Tim Taler\" with role \"Grantee\" associated with LAU" +
                    "nit \"Occupancy4Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.Given("Registration transaction \"REGO\" with No.\"TRN-OCCUPANCY-4-MERGE-002\" is set curren" +
                    "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("Current transaction has target LAUnit \"Occupancy4Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("Current transaction has property with Uid = \"Property 4 Merge 02\" in LAUnit \"Occu" +
                    "pancy4Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("Current transaction has party \"Steve Adams\" with role \"Grantee\" associated with L" +
                    "AUnit \"Occupancy4Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.When("transaction \"TRN-OCCUPANCY-4-MERGE-001\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.And("transaction \"TRN-OCCUPANCY-4-MERGE-002\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        public virtual void SetFixture(MergeFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Merge")]
        [Xunit.TraitAttribute("Description", "Simple merge of 2 properties")]
        public virtual void SimpleMergeOf2Properties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple merge of 2 properties", new string[] {
                        "merger"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 27
 testRunner.Given("Registration transaction \"MERG\" with No.\"TRN-MERGE-001\" is set current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("Current transaction has target LAUnit \"Simple Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("Current transaction has property with Uid = \"Property 5 Merge Result\" in LAUnit \"" +
                    "Simple Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("Current transaction has party \"Mark Twen (merger)\" with role \"Grantee\" associated" +
                    " with LAUnit \"Simple Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("Current transaction has source LAUnit \"Source 4 Simple Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.And("Current transaction has property with Uid = \"Property 4 Merge 01\" in LAUnit \"Simp" +
                    "le Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("Current transaction has property with Uid = \"Property 4 Merge 02\" in LAUnit \"Simp" +
                    "le Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("Property \"Property 4 Merge 01\" in Transaction No\"TRN-MERGE-001\" Status set \"Archi" +
                    "ved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("Property \"Property 4 Merge 02\" in Transaction No\"TRN-MERGE-001\" Status set \"Archi" +
                    "ved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("transaction \"TRN-MERGE-001\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("Cancelled by \"TRN-MERGE-001\" 2 \"Occupancy\" rights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
 testRunner.And("Party \"Mark Twen (merger)\" have active \"Occupancy\" rights on \"Property 5 Merge Re" +
                    "sult\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("Property \"Property 4 Merge 01\" is archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("Property \"Property 4 Merge 02\" is archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Merge")]
        [Xunit.TraitAttribute("Description", "Amalgamation merge of 2 properties")]
        public virtual void AmalgamationMergeOf2Properties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Amalgamation merge of 2 properties", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 48
 testRunner.Given("Registration transaction \"REGO\" with No.\"TRN-Src-AMALGA-MERGE-001\" is set current" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
 testRunner.And("Current transaction has target LAUnit \"Occupancy4A-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("Current transaction has property with Uid = \"Property 7 A-Merge 01\" in LAUnit \"Oc" +
                    "cupancy4A-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("Current transaction has party \"Robert Taler\" with role \"Grantee\" associated with " +
                    "LAUnit \"Occupancy4A-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.Given("Registration transaction \"REGO\" with No.\"TRN-Src-AMALGA-MERGE-002\" is set current" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.And("Current transaction has target LAUnit \"Occupancy4A-Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("Current transaction has property with Uid = \"Property 7 A-Merge 02\" in LAUnit \"Oc" +
                    "cupancy4A-Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.And("Current transaction has party \"John Adams\" with role \"Grantee\" associated with LA" +
                    "Unit \"Occupancy4A-Merge-LA-02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.When("transaction \"TRN-Src-AMALGA-MERGE-001\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.And("transaction \"TRN-Src-AMALGA-MERGE-002\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.Given("Registration transaction \"MERG\" with No.\"TRN-A-MERGE-002\" is set current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.And("Current transaction has target LAUnit \"Amalg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("Current transaction has property with Uid = \"Property 7 A-Merge 01\" in LAUnit \"Am" +
                    "alg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("Current transaction has party \"Matt Tomson (merger)\" with role \"Grantee\" associat" +
                    "ed with LAUnit \"Amalg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("Current transaction has source LAUnit \"Source 4 Amalg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("Current transaction has property with Uid = \"Property 7 A-Merge 01\" in LAUnit \"So" +
                    "urce 4 Amalg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("Current transaction has property with Uid = \"Property 7 A-Merge 02\" in LAUnit \"So" +
                    "urce 4 Amalg-Merge-LA-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.And("Property \"Property 7 A-Merge 02\" in Transaction No\"TRN-A-MERGE-002\" Status set \"A" +
                    "rchived\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 71
 testRunner.When("transaction \"TRN-A-MERGE-002\" is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
 testRunner.Then("Cancelled by \"TRN-A-MERGE-002\" 2 \"Occupancy\" rights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
 testRunner.And("Party \"Matt Tomson (merger)\" have active \"Occupancy\" rights on \"Property 7 A-Merg" +
                    "e 01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("Property \"Property 7 A-Merge 01\" is not archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And("Property \"Property 7 A-Merge 02\" is archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MergeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MergeFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
